from modules.DatabaseModule.DBManager import DBManager
from modules.DatabaseModule.DBManagerTeraServiceAccess import DBManagerTeraServiceAccess
from opentera.db.models.TeraUser import TeraUser
from opentera.db.models.TeraUserGroup import TeraUserGroup
from opentera.db.models.TeraParticipant import TeraParticipant
from opentera.db.models.TeraParticipantGroup import TeraParticipantGroup
from opentera.db.models.TeraService import TeraService
from opentera.db.models.TeraDevice import TeraDevice
from opentera.db.models.TeraProject import TeraProject
from opentera.db.models.TeraSite import TeraSite
from opentera.db.models.TeraSession import TeraSession
from opentera.db.models.TeraSessionType import TeraSessionType
from opentera.db.models.TeraTestType import TeraTestType
from opentera.db.models.TeraServiceProject import TeraServiceProject
from opentera.db.models.TeraServiceSite import TeraServiceSite
from tests.opentera.db.models.BaseModelsTest import BaseModelsTest


class DBManagerTeraServiceAccessTest(BaseModelsTest):

    def _create_service_with_no_access(self) -> TeraService:

        # Since service keys are unique, if service already exists, return it
        service = TeraService.get_service_by_key('NoAccess')
        if service:
            return service

        service = TeraService()
        # service.id_service = 0 # This is generated by the DB
        # service.service_uuid = '00000000-0000-0000-0000-000000000000' # This is generated by the DB
        service.service_name = 'No Access'
        service.service_key = 'NoAccess'
        service.service_hostname = 'localhost'
        service.service_port = 8080
        service.service_endpoint = '/noaccess'
        service.service_clientendpoint = '/noaccess'
        service.service_endpoint_user = '/noaccess'
        service.service_endpoint_participant = '/noaccess'
        service.service_endpoint_device = '/noaccess'
        service.service_enabled = True
        service.service_system = False
        service.service_editable_config = False
        service.service_default_config = '{}'
        service.service_has_assets = False
        service.service_has_tests = False
        TeraService.insert(service)
        return service

    def test_service_get_accessible_devices_ids_and_uuids(self):
        """
        This will test at the same time get_accessible_devices and get_accessible_devices_ids/uuids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            devices_ids : set[int] = set(service_access.get_accessible_devices_ids())
            devices_uuids : set[str] = set(service_access.get_accessible_devices_uuids())

            all_devices = TeraDevice.query.all()
            accessible_devices = set()
            for device in all_devices:
                for project in device.device_projects:
                    if project.id_project in service_access.get_accessible_projects_ids():
                        accessible_devices.add(device.id_device)

            self.assertEqual(len(devices_ids), len(accessible_devices))
            self.assertEqual(len(devices_uuids), len(devices_ids))
            self.assertEqual(devices_ids, accessible_devices)

            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_devices_ids()), 0)

    def test_service_get_accessible_projects_ids(self):
        """
        This will test at the same time get_accessible_projects and get_accessible_projects_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            projects_ids = set(service_access.get_accessible_projects_ids())

            all_projects: list[TeraProject] = TeraProject.query.all()
            accessible_projects = set()
            for project in all_projects:
                for project_service in project.project_services:
                    if project_service.id_service == service.id_service:
                        accessible_projects.add(project.id_project)
            self.assertEqual(len(projects_ids), len(accessible_projects))
            self.assertEqual(projects_ids, accessible_projects)

            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_projects_ids()), 0)

    def test_service_get_accessible_sessions_ids(self):
        """
        This will test at the same time get_accessible_sessions and get_accessible_sessions_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            sessions_ids = set(service_access.get_accessible_sessions_ids())

            all_sessions = TeraSession.query.all()
            accessible_sessions = set()

            for session in all_sessions:
                # Creator
                if session.id_creator_service == service.id_service:
                    accessible_sessions.add(session.id_session)
                # Participants
                for participant in session.session_participants:
                    if participant.id_participant in service_access.get_accessible_participants_ids():
                        accessible_sessions.add(session.id_session)
                # Users
                for user in session.session_users:
                    if user.id_user in service_access.get_accessible_users_ids():
                        accessible_sessions.add(session.id_session)
                # Devices
                for device in session.session_devices:
                    if device.id_device in service_access.get_accessible_devices_ids():
                        accessible_sessions.add(session.id_session)

            self.assertEqual(len(sessions_ids), len(accessible_sessions))
            self.assertEqual(sessions_ids, accessible_sessions)

            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_sessions_ids()), 0)

    def test_service_get_accessible_sites_id(self):
        """
        This will test at the same time get_accessible_sites and get_accessible_sites_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            sites_ids = set(service_access.get_accessible_sites_ids())

            all_sites = TeraSite.query.all()
            accessible_sites = set()
            for site in all_sites:
                for project in site.site_projects:
                    if project.id_project in service_access.get_accessible_projects_ids():
                        accessible_sites.add(site.id_site)
            self.assertEqual(len(sites_ids), len(accessible_sites))
            self.assertEqual(sites_ids, accessible_sites)

            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_sites_ids()), 0)

    def test_service_get_accessible_participants_id(self):
        """
        This will test at the same time get_accessible_participants and get_accessible_participants_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            participants_ids = set(service_access.get_accessible_participants_ids())

            all_participants = TeraParticipant.query.all()
            accessible_participants = set()
            for participant in all_participants:
                if participant.id_project in service_access.get_accessible_projects_ids():
                    accessible_participants.add(participant.id_participant)
            self.assertEqual(len(participants_ids), len(accessible_participants))
            self.assertEqual(participants_ids, accessible_participants)

            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_participants_ids()), 0)

    def test_service_get_accessible_participant_groups_id(self):
        """
        This will test at the same time get_accessible_participant_groups and get_accessible_participant_groups_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access: DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            participant_groups_ids = set(service_access.get_accessible_participants_groups_ids())

            all_participant_groups = TeraParticipantGroup.query.all()
            accessible_participant_groups = set()
            for participant_group in all_participant_groups:
                if participant_group.id_project in service_access.get_accessible_projects_ids():
                    accessible_participant_groups.add(participant_group.id_participant_group)
            self.assertEqual(len(participant_groups_ids), len(accessible_participant_groups))
            self.assertEqual(participant_groups_ids, accessible_participant_groups)

            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_participants_groups_ids()), 0)

    def test_service_get_accessible_users_ids(self):
        """
        This will test at the same time get_accessible_users and get_accessible_users_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            users_ids = set(service_access.get_accessible_users_ids())

            all_users = TeraUser.query.all()
            accessible_users = set()

            service_projects_ids = [project.id_project for project in service.service_projects]
            service_site_ids = [site.id_site for site in service.service_sites]

            for user in all_users:
                teraserver_service = TeraService.get_openteraserver_service()

                for user_group in user.user_user_groups:
                    for service_role in user_group.user_group_services_roles:
                        if service_role.id_service == teraserver_service.id_service:
                            # Add users that have a role in a project accessible by the service
                            if service_role.id_project in service_projects_ids :
                                accessible_users.add(user.id_user)
                            # Add users that have a role in a site accessible by the service
                            if service_role.id_site in service_site_ids :
                                accessible_users.add(user.id_user)

            self.assertEqual(len(users_ids), len(accessible_users))
            self.assertEqual(users_ids, accessible_users)

            # Test with a service with no access
            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_users_ids()), 0)

    def test_service_get_accessible_usergroup_ids(self):
        """
        This will test at the same time get_accessible_usergroups and get_accessible_usergroups_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            usergroups_ids = set(service_access.get_accessible_usergroups_ids())

            all_usergroups = TeraUserGroup.query.all()
            accessible_usergroups = set()

            service_projects_ids = [project.id_project for project in service.service_projects]
            service_site_ids = [site.id_site for site in service.service_sites]

            teraserver_service = TeraService.get_openteraserver_service()

            for usergroup in all_usergroups:
                for service_role in usergroup.user_group_services_roles:
                    # TODO More permissive ?
                    #if service_role.id_service == teraserver_service.id_service or \
                    #    service_role.id_service == service.id_service:
                    if service_role.id_service == service.id_service:
                        # Add usergroups that have a role in a project accessible by the service
                        if service_role.id_project in service_projects_ids:
                            accessible_usergroups.add(usergroup.id_user_group)
                        # Add usergroups that have a role in a site accessible by the service
                        if service_role.id_site in service_site_ids:
                            accessible_usergroups.add(usergroup.id_user_group)

            self.assertEqual(len(usergroups_ids), len(accessible_usergroups))
            self.assertEqual(usergroups_ids, accessible_usergroups)

            # Test with a service with no access
            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_usergroups_ids()), 0)

    def test_service_get_accessible_sessions_types_ids(self):
        """
        This will test at the same time get_accessible_session_types and get_accessible_session_types_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            session_types_ids = set(service_access.get_accessible_sessions_types_ids())

            all_session_types = TeraSessionType.query.all()
            accessible_session_types = set()
            for session_type in all_session_types:
                if session_type.id_service == service.id_service:
                    accessible_session_types.add(session_type.id_session_type)
            self.assertEqual(len(session_types_ids), len(accessible_session_types))
            self.assertEqual(session_types_ids, accessible_session_types)

            # Test with a service with no access
            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_sessions_types_ids()), 0)

    def test_service_get_accessible_tests_types_ids(self):
        """
        This will test at the same time get_accessible_tests_types and get_accessible_tests_types_ids.
        """
        with self._flask_app.app_context():
            service =  TeraService.get_service_by_key('VideoRehabService')
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            test_types_ids = set(service_access.get_accessible_tests_types_ids())

            all_test_types = TeraTestType.query.all()
            accessible_test_types = set()
            for test_type in all_test_types:
                if test_type.id_service == service.id_service:
                    accessible_test_types.add(test_type.id_test_type)
            self.assertEqual(len(test_types_ids), len(accessible_test_types))
            self.assertEqual(test_types_ids, accessible_test_types)

            # Test with a service with no access
            service = self._create_service_with_no_access()
            self.assertIsNotNone(service)
            service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
            self.assertEqual(len(service_access.get_accessible_tests_types_ids()), 0)


    def test_service_get_accessible_tests_types_ids_for_device(self):
        """
        This will test at the same time get_accessible_tests_types_for_device and get_accessible_tests_types_ids_for_device.
        """
        with self._flask_app.app_context():

            all_devices = TeraDevice.query.all()
            for device in all_devices:
                service =  TeraService.get_service_by_key('VideoRehabService')
                self.assertIsNotNone(service)
                service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)

                test_types_service_ids = service_access.get_accessible_tests_types_ids()
                test_types_ids = set(service_access.get_accessible_tests_types_ids_for_device(device.id_device))

                for id in test_types_ids:
                    self.assertTrue(id in test_types_service_ids)

                # Test with a service with no access
                service = self._create_service_with_no_access()
                self.assertIsNotNone(service)
                service_access : DBManagerTeraServiceAccess = DBManager.serviceAccess(service)
                self.assertEqual(len(service_access.get_accessible_tests_types_ids_for_device(device.id_device)), 0)
